!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/fedora/Desktop/42_minishell/new/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(NAME)	Makefile	/^$(NAME):		$(OBJS)$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o:%.c$/;"	t
CC	Makefile	/^CC				=	cc$/;"	m
CCACHE	Makefile	/^CCACHE			=	ccache$/;"	m
CFLAGS	Makefile	/^CFLAGS			=	-Wall -Werror -Wextra$/;"	m
CFLAGS	Makefile	/^no_flags:		CFLAGS =$/;"	m
CFLAGS_DEBUG	Makefile	/^CFLAGS_DEBUG	=	-g -fsanitize=address -fsanitize=undefined$/;"	m
ERROR_ASSERT	include/minishell.h	/^# define ERROR_ASSERT	/;"	d
ERROR_EXEC	include/minishell.h	/^# define ERROR_EXEC	/;"	d
ERROR_EXPORT	include/minishell.h	/^# define ERROR_EXPORT	/;"	d
ERROR_SYNTAX	include/minishell.h	/^# define ERROR_SYNTAX	/;"	d
INCLUDE	Makefile	/^INCLUDE			=	-I include$/;"	m
LIBS	Makefile	/^LIBS			=	-L$(RLDIR)\/lib -lreadline$/;"	m
LIBS	Makefile	/^LIBS			=	-lreadline$/;"	m
MINISHELL_H	include/minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Makefile	/^NAME			=	minishell$/;"	m
ND_PIPE	include/minishell.h	/^	ND_PIPE,$/;"	e	enum:e_node_kind
ND_REDIRECT_APPEND	include/minishell.h	/^	ND_REDIRECT_APPEND,$/;"	e	enum:e_node_kind
ND_REDIRECT_HEREDOC	include/minishell.h	/^	ND_REDIRECT_HEREDOC,$/;"	e	enum:e_node_kind
ND_REDIRECT_IN	include/minishell.h	/^	ND_REDIRECT_IN,$/;"	e	enum:e_node_kind
ND_REDIRECT_OUT	include/minishell.h	/^	ND_REDIRECT_OUT,$/;"	e	enum:e_node_kind
ND_SIMPLE_CMD	include/minishell.h	/^	ND_SIMPLE_CMD,$/;"	e	enum:e_node_kind
OBJS	Makefile	/^OBJS			=	$(SRCS:%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR			=	obj$/;"	m
PHONY	Makefile	/^PHONY			=	all$/;"	m
PROMPT	include/minishell.h	/^# define PROMPT	/;"	d
PROMPT_ERROR	include/minishell.h	/^# define PROMPT_ERROR	/;"	d
RLDIR	Makefile	/^RLDIR    = $(shell brew --prefix readline)$/;"	m
SHELL	Makefile	/^SHELL			=	\/bin\/bash$/;"	m
SRCS	Makefile	/^SRCS			=	src\/main.c				\\$/;"	m
TK_EOF	include/minishell.h	/^	TK_EOF,$/;"	e	enum:e_tk_kind
TK_PIPE	include/minishell.h	/^	TK_PIPE,$/;"	e	enum:e_tk_kind
TK_REDIRECT	include/minishell.h	/^	TK_REDIRECT,$/;"	e	enum:e_tk_kind
TK_WORD	include/minishell.h	/^	TK_WORD,$/;"	e	enum:e_tk_kind
add_env	src/env/env.c	/^void	add_env(const char *env, t_env **env_list)$/;"	f	typeref:typename:void
all	Makefile	/^all:			$(NAME)	$/;"	t
append_char	src/expand/expand.c	/^char	*append_char(char **skipped, char *word, char *new_word)$/;"	f	typeref:typename:char *
argv_len	src/exec/exec.c	/^size_t	argv_len(t_tk *token)$/;"	f	typeref:typename:size_t
assert_error	src/error/error.c	/^void	assert_error(const char *msg)$/;"	f	typeref:typename:void
builtin_echo	src/builtin/echo.c	/^void	builtin_echo(char **argv)$/;"	f	typeref:typename:void
builtin_export	src/builtin/export.c	/^int	builtin_export(char **argv, t_env **env_list)$/;"	f	typeref:typename:int
cd	src/builtin/cd.c	/^int	cd(char **destination, t_env **env_list)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:			$/;"	t
connect_pipe	src/pipe/pipe.c	/^void	connect_pipe(t_node *node)$/;"	f	typeref:typename:void
connect_pipe_builtin	src/pipe/pipe.c	/^void	connect_pipe_builtin(t_node *node)$/;"	f	typeref:typename:void
count_pipe_num	src/exec/exec.c	/^size_t	count_pipe_num(t_node *node)$/;"	f	typeref:typename:size_t
ctrl_backslash	src/main.c	/^void	ctrl_backslash(int sig)$/;"	f	typeref:typename:void
ctrl_c	src/main.c	/^void	ctrl_c(int sig)$/;"	f	typeref:typename:void
debug	Makefile	/^debug:			CFLAGS += $(CFLAGS_DEBUG)$/;"	t
debug	Makefile	/^debug:			re$/;"	t
del_env	src/env/env.c	/^void	del_env(const char *key, t_env **env_list)$/;"	f	typeref:typename:void
do_redirect	src/redirect/redirect.c	/^void	do_redirect(t_node *redir)$/;"	f	typeref:typename:void
dup_simple_command_token	src/parse/parse.c	/^t_tk	*dup_simple_command_token(t_tk **skipped, t_tk *token)$/;"	f	typeref:typename:t_tk *
dup_token	src/parse/parse.c	/^t_tk	*dup_token(char *word)$/;"	f	typeref:typename:t_tk *
e_node_kind	include/minishell.h	/^enum e_node_kind$/;"	g
e_tk_kind	include/minishell.h	/^enum e_tk_kind$/;"	g
env	src/builtin/env.c	/^int	env(char **argv, t_env *env_list)$/;"	f	typeref:typename:int
env_addback	src/env/env.c	/^void	env_addback(t_env **env_list, t_env *env_new)$/;"	f	typeref:typename:void
env_error	src/error/error.c	/^void	env_error(const char *cmd)$/;"	f	typeref:typename:void
env_into_array	src/builtin/export.c	/^static char	**env_into_array(t_env *env_list)$/;"	f	typeref:typename:char **	file:
env_last	src/env/env.c	/^t_env	*env_last(t_env *env_list)$/;"	f	typeref:typename:t_env *
env_list_size	src/exec/exec.c	/^size_t	env_list_size(t_env *env_list)$/;"	f	typeref:typename:size_t
env_new	src/env/env.c	/^t_env	*env_new(char *key, char *value)$/;"	f	typeref:typename:t_env *
exec_cmd	src/exec/exec.c	/^void	exec_cmd(t_node *node, t_env **env_list)$/;"	f	typeref:typename:void
exec_error	include/minishell.h	/^	bool	exec_error;$/;"	m	struct:s_return_error	typeref:typename:bool
expand	src/expand/expand.c	/^void	expand(t_node *node, t_env *env_list)$/;"	f	typeref:typename:void
expand_double_quote	src/expand/expand.c	/^char	*expand_double_quote(char **skipped, char *word, char *new_word, t_env *env_list)$/;"	f	typeref:typename:char *
expand_single_quote	src/expand/expand.c	/^char	*expand_single_quote(char **skipped, char *word, char *new_word)$/;"	f	typeref:typename:char *
expand_special_char	src/expand/expand.c	/^char	*expand_special_char(char **skipped, char *word, char *new_word)$/;"	f	typeref:typename:char *
expand_token	src/expand/expand.c	/^void	expand_token(t_tk *token, t_env *env_list)$/;"	f	typeref:typename:void
expand_variable	src/expand/expand.c	/^char	*expand_variable(char **skipped, char *word, char *new_word, t_env *env_list)$/;"	f	typeref:typename:char *
expand_word	src/expand/expand.c	/^char	*expand_word(char *word, t_env *env_list)$/;"	f	typeref:typename:char *
export_error	include/minishell.h	/^	bool	export_error;$/;"	m	struct:s_return_error	typeref:typename:bool
export_error	src/error/error.c	/^void	export_error(const char *cmd)$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean:			clean$/;"	t
fd_file	include/minishell.h	/^	int			fd_file;$/;"	m	struct:s_node	typeref:typename:int
fd_save	include/minishell.h	/^	int			fd_save;$/;"	m	struct:s_node	typeref:typename:int
fd_save_inpipe	include/minishell.h	/^	int			fd_save_inpipe;$/;"	m	struct:s_node	typeref:typename:int
fd_save_outpipe	include/minishell.h	/^	int			fd_save_outpipe;$/;"	m	struct:s_node	typeref:typename:int
fd_target	include/minishell.h	/^	int			fd_target;$/;"	m	struct:s_node	typeref:typename:int
file_exec_error	src/error/error.c	/^void	file_exec_error(const char *word, const char *msg)$/;"	f	typeref:typename:void
filename	include/minishell.h	/^	char		*filename;$/;"	m	struct:s_node	typeref:typename:char *
find_env_path	src/exec/make_path.c	/^char	*find_env_path(t_env *env_list)$/;"	f	typeref:typename:char *
find_word_expandable	src/expand/expand.c	/^t_env	*find_word_expandable(const char *key, t_env *env_list)$/;"	f	typeref:typename:t_env *
free_argv	src/exec/exec.c	/^void	free_argv(char **argv)$/;"	f	typeref:typename:void
free_array	src/builtin/export.c	/^static void	free_array(char **env_array)$/;"	f	typeref:typename:void	file:
free_env	src/env/env.c	/^void	free_env(t_env **env_list)$/;"	f	typeref:typename:void
free_envp	src/exec/exec.c	/^void	free_envp(char **envp)$/;"	f	typeref:typename:void
free_node	src/main.c	/^void	free_node(t_node **node)$/;"	f	typeref:typename:void
free_token	src/main.c	/^void	free_token(t_tk **token)$/;"	f	typeref:typename:void
g_return_error	src/main.c	/^t_return_error	g_return_error;$/;"	v	typeref:typename:t_return_error
g_return_error	src/redirect/heredoc.c	/^t_return_error	g_return_error;$/;"	v	typeref:typename:t_return_error
g_sig	include/minishell.h	/^	int		g_sig;$/;"	m	struct:s_return_error	typeref:typename:int
get_pwd	src/builtin/pwd.c	/^int	get_pwd(void)$/;"	f	typeref:typename:int
get_size	src/expand/expand.c	/^static size_t	get_size(int n)$/;"	f	typeref:typename:size_t	file:
go_back_prev	src/builtin/cd.c	/^static int	go_back_prev(t_env **env_list)$/;"	f	typeref:typename:int	file:
go_home	src/builtin/cd.c	/^static int	go_home(t_env **env_list)$/;"	f	typeref:typename:int	file:
heredoc	src/redirect/heredoc.c	/^int	heredoc(char *delimiter)$/;"	f	typeref:typename:int
init_node	src/parse/parse.c	/^void	init_node(t_node *node)$/;"	f	typeref:typename:void
init_return_error	src/main.c	/^void	init_return_error(void)$/;"	f	typeref:typename:void
inpipe	include/minishell.h	/^	int			inpipe[2];$/;"	m	struct:s_node	typeref:typename:int[2]
input_pipefd	src/pipe/pipe.c	/^void	input_pipefd(t_node *node, int *inpipe)$/;"	f	typeref:typename:void
interpret	src/main.c	/^void	interpret(char *line, t_env **env_list)$/;"	f	typeref:typename:void
is_alpha_num_under	src/expand/is_01.c	/^bool	is_alpha_num_under(char c)$/;"	f	typeref:typename:bool
is_alpha_under	src/expand/is_01.c	/^bool	is_alpha_under(char c)$/;"	f	typeref:typename:bool
is_blank	src/lexer/is_01.c	/^bool	is_blank(char c)$/;"	f	typeref:typename:bool
is_builtin	src/exec/exec.c	/^bool	is_builtin(const char *cmd)$/;"	f	typeref:typename:bool
is_double_quote	src/expand/is_01.c	/^bool	is_double_quote(const char c)$/;"	f	typeref:typename:bool
is_file	src/exec/is.c	/^bool	is_file(const char *pathname)$/;"	f	typeref:typename:bool
is_file_executable	src/exec/is.c	/^bool	is_file_executable(const char *pathname)$/;"	f	typeref:typename:bool
is_file_exist	src/exec/is.c	/^bool	is_file_exist(const char *pathname)$/;"	f	typeref:typename:bool
is_key_exist	src/builtin/export.c	/^bool	is_key_exist(const char *env, t_env *env_list)$/;"	f	typeref:typename:bool
is_pipe	src/lexer/is_02.c	/^bool	is_pipe(char c)$/;"	f	typeref:typename:bool
is_quote	src/lexer/is_01.c	/^bool	is_quote(char c)$/;"	f	typeref:typename:bool
is_quoted	src/lexer/is_01.c	/^bool	is_quoted(char c, char **skipped, char *line)$/;"	f	typeref:typename:bool
is_redirect	src/lexer/is_01.c	/^bool	is_redirect(char c, char **skipped, char *line)$/;"	f	typeref:typename:bool
is_redirect_error	src/lexer/is_01.c	/^static bool	is_redirect_error(char *line)$/;"	f	typeref:typename:bool	file:
is_redirect_in_exist	src/pipe/pipe.c	/^bool	is_redirect_in_exist(t_node *node)$/;"	f	typeref:typename:bool
is_redirect_out_exist	src/pipe/pipe.c	/^bool	is_redirect_out_exist(t_node *node)$/;"	f	typeref:typename:bool
is_single_quote	src/expand/is_01.c	/^bool	is_single_quote(const char c)$/;"	f	typeref:typename:bool
is_special_charactor	src/expand/is_02.c	/^bool	is_special_charactor(char *line)$/;"	f	typeref:typename:bool
is_variable	src/expand/is_01.c	/^bool	is_variable(char *line)$/;"	f	typeref:typename:bool
itoa	src/expand/expand.c	/^char	*itoa(int n)$/;"	f	typeref:typename:char *
judge_nd_kind	src/parse/parse.c	/^int	judge_nd_kind(char *redirect)$/;"	f	typeref:typename:int
key	include/minishell.h	/^	char		*key;$/;"	m	struct:s_env	typeref:typename:char *
kind	include/minishell.h	/^	t_node_kind	kind;$/;"	m	struct:s_node	typeref:typename:t_node_kind
kind	include/minishell.h	/^	t_tk_kind		kind;$/;"	m	struct:s_tk	typeref:typename:t_tk_kind
leak	Makefile	/^leak:			all$/;"	t
main	src/main.c	/^int	main(int argc, char const *argv[], char *envp[])$/;"	f	typeref:typename:int
make_absolute_path	src/exec/make_path.c	/^char	*make_absolute_path(t_tk *token)$/;"	f	typeref:typename:char *
make_argv	src/exec/exec.c	/^char	**make_argv(t_tk *token)$/;"	f	typeref:typename:char **
make_env_list	src/env/env.c	/^t_env	*make_env_list(char **envp)$/;"	f	typeref:typename:t_env *
make_envp	src/exec/exec.c	/^char	**make_envp(t_env *env_list)$/;"	f	typeref:typename:char **
make_pathname	src/exec/make_path.c	/^char	*make_pathname(t_tk *token, t_env *env_list)$/;"	f	typeref:typename:char *
make_redirect	src/parse/parse.c	/^void	make_redirect(t_node *node, t_tk *token)$/;"	f	typeref:typename:void
make_relative_path	src/exec/make_path.c	/^char	*make_relative_path(t_tk *token, t_env *env_list)$/;"	f	typeref:typename:char *
make_simple_command	src/parse/parse.c	/^void	make_simple_command(t_node *node, t_tk **skipped, t_tk *token)$/;"	f	typeref:typename:void
manage_cd_path	src/builtin/cd.c	/^static int	manage_cd_path(char *destination, t_env **env_list)$/;"	f	typeref:typename:int	file:
new_node	src/parse/parse.c	/^t_node	*new_node(t_node_kind kind, t_node *node_pre)$/;"	f	typeref:typename:t_node *
next	include/minishell.h	/^	t_env		*next;$/;"	m	struct:s_env	typeref:typename:t_env *
next	include/minishell.h	/^	t_tk			*next;$/;"	m	struct:s_tk	typeref:typename:t_tk *
no_flags	Makefile	/^no_flags:		CFLAGS =$/;"	t
no_flags	Makefile	/^no_flags:		re$/;"	t
open_redir_file	src/redirect/redirect.c	/^int	open_redir_file(t_node *redir)$/;"	f	typeref:typename:int
outpipe	include/minishell.h	/^	int			outpipe[2];$/;"	m	struct:s_node	typeref:typename:int[2]
overwrite_env	src/builtin/export.c	/^void	overwrite_env(const char *env, t_env *env_list)$/;"	f	typeref:typename:void
parse	src/parse/parse.c	/^t_node	*parse(t_tk *token)$/;"	f	typeref:typename:t_node *
parse_error	include/minishell.h	/^	bool	parse_error;$/;"	m	struct:s_return_error	typeref:typename:bool
pipe	include/minishell.h	/^	t_node		*pipe;$/;"	m	struct:s_node	typeref:typename:t_node *
pipe_into_list	src/lexer/into_list.c	/^t_tk	*pipe_into_list(char **skipped, char *line, t_tk *token)$/;"	f	typeref:typename:t_tk *
pre	include/minishell.h	/^	t_env		*pre;$/;"	m	struct:s_env	typeref:typename:t_env *
print_env	src/builtin/env.c	/^static void	print_env(t_env *env_list)$/;"	f	typeref:typename:void	file:
print_env_list	src/debug_func.c	/^void	print_env_list(t_env *env_list)$/;"	f	typeref:typename:void
print_node	src/debug_func.c	/^void	print_node(t_node *node, int i)$/;"	f	typeref:typename:void
print_t_node_kind	src/debug_func.c	/^static const char	*print_t_node_kind(int kind)$/;"	f	typeref:typename:const char *	file:
print_t_tk	src/debug_func.c	/^void	print_t_tk(t_tk	*token)$/;"	f	typeref:typename:void
print_t_tk_kind	src/debug_func.c	/^const char	*print_t_tk_kind(int kind)$/;"	f	typeref:typename:const char *
put_sorted_env	src/builtin/export.c	/^static void	put_sorted_env(t_env *env_list)$/;"	f	typeref:typename:void	file:
quoted_into_list	src/lexer/into_list.c	/^t_tk	*quoted_into_list(char **skipped, char *line, const char c)$/;"	f	typeref:typename:t_tk *
re	Makefile	/^re:				fclean all$/;"	t
recognize_builtin	src/builtin/recognize_builtin.c	/^int	recognize_builtin(char **argv, t_env **env_list)$/;"	f	typeref:typename:int
redirect	include/minishell.h	/^	t_node		*redirect;$/;"	m	struct:s_node	typeref:typename:t_node *
redirect_error	include/minishell.h	/^	bool	redirect_error;$/;"	m	struct:s_return_error	typeref:typename:bool
redirect_fd_list	src/redirect/redirect.c	/^void	redirect_fd_list(t_node *redir)$/;"	f	typeref:typename:void
redirect_into_list	src/lexer/into_list.c	/^t_tk	*redirect_into_list(char **skipped,$/;"	f	typeref:typename:t_tk *
redirect_pre	include/minishell.h	/^	t_node		*redirect_pre;$/;"	m	struct:s_node	typeref:typename:t_node *
reset_redirect	src/redirect/redirect.c	/^void	reset_redirect(t_node *redir)$/;"	f	typeref:typename:void
return_value	include/minishell.h	/^	int		return_value;$/;"	m	struct:s_return_error	typeref:typename:int
s_env	include/minishell.h	/^struct s_env$/;"	s
s_node	include/minishell.h	/^struct s_node$/;"	s
s_return_error	include/minishell.h	/^struct s_return_error$/;"	s
s_tk	include/minishell.h	/^struct s_tk$/;"	s
search_env	src/env/env.c	/^t_env	*search_env(const char *key, t_env *env_list)$/;"	f	typeref:typename:t_env *
setup_signal	src/main.c	/^void	setup_signal(void)$/;"	f	typeref:typename:void
signal_hook	src/main.c	/^int	signal_hook(void)$/;"	f	typeref:typename:int
skip_blank	src/lexer/tokenize.c	/^static void	skip_blank(char **skipped, char *line)$/;"	f	typeref:typename:void	file:
sort_array	src/builtin/export.c	/^static void	sort_array(char **env_array)$/;"	f	typeref:typename:void	file:
strjoin	src/exec/exec.c	/^char	*strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
strjoin_three	src/exec/exec.c	/^char	*strjoin_three(char const *s1, char const *s2, char const *s3)$/;"	f	typeref:typename:char *
syntax_error	src/error/error.c	/^void	syntax_error(const char *msg, char **skipped, char *line)$/;"	f	typeref:typename:void
t_env	include/minishell.h	/^typedef struct s_env			t_env;$/;"	t	typeref:struct:s_env
t_node	include/minishell.h	/^typedef struct s_node			t_node;$/;"	t	typeref:struct:s_node
t_node_kind	include/minishell.h	/^typedef enum e_node_kind		t_node_kind;$/;"	t	typeref:enum:e_node_kind
t_return_error	include/minishell.h	/^typedef struct s_return_error	t_return_error;$/;"	t	typeref:struct:s_return_error
t_tk	include/minishell.h	/^typedef struct s_tk				t_tk;$/;"	t	typeref:struct:s_tk
t_tk_kind	include/minishell.h	/^typedef enum e_tk_kind			t_tk_kind;$/;"	t	typeref:enum:e_tk_kind
test	Makefile	/^test:			all$/;"	t
tmp	Makefile	/^tmp:		$/;"	t
token	include/minishell.h	/^	t_tk		*token;$/;"	m	struct:s_node	typeref:typename:t_tk *
token_new	src/lexer/tokenize.c	/^t_tk	*token_new(char *word, t_tk_kind kind)$/;"	f	typeref:typename:t_tk *
tokenize	src/lexer/tokenize.c	/^t_tk	*tokenize(char *line)$/;"	f	typeref:typename:t_tk *
tokenize_error	include/minishell.h	/^	bool	tokenize_error;$/;"	m	struct:s_return_error	typeref:typename:bool
unset	src/builtin/unset.c	/^int	unset(char **argv, t_env **env_list)$/;"	f	typeref:typename:int
valgrind	Makefile	/^valgrind:		all$/;"	t
value	include/minishell.h	/^	char		*value;$/;"	m	struct:s_env	typeref:typename:char *
word	include/minishell.h	/^	char			*word;$/;"	m	struct:s_tk	typeref:typename:char *
word_into_list	src/lexer/into_list.c	/^t_tk	*word_into_list(char **skipped, char *line)$/;"	f	typeref:typename:t_tk *
wrap_chdir	src/wrap/chdir.c	/^int	wrap_chdir(const char *path)$/;"	f	typeref:typename:int
wrap_close	src/wrap/close.c	/^int	wrap_close(int fd)$/;"	f	typeref:typename:int
wrap_dup	src/wrap/dup.c	/^int	wrap_dup(int oldfd)$/;"	f	typeref:typename:int
wrap_dup2	src/wrap/dup2.c	/^int	wrap_dup2(int oldfd, int newfd)$/;"	f	typeref:typename:int
wrap_fork	src/wrap/fork.c	/^pid_t	wrap_fork(void)$/;"	f	typeref:typename:pid_t
wrap_getcwd	src/wrap/getcwd.c	/^char	*wrap_getcwd(char *buf, size_t size)$/;"	f	typeref:typename:char *
wrap_pipe	src/wrap/pipe.c	/^int	wrap_pipe(int pipefd[2])$/;"	f	typeref:typename:int
wrap_read	src/wrap/read.c	/^ssize_t	wrap_read(int fd, void *buf, size_t count)$/;"	f	typeref:typename:ssize_t
wrap_write	src/wrap/write.c	/^ssize_t wrap_write(int fd, const void *buf, size_t count)$/;"	f	typeref:typename:ssize_t
